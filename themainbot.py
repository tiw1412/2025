from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ContentType, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from asyncio import *
from random import *

import os
import dotenv

dotenv.load_dotenv()
BOT_TOKEN: str = os.getenv('BOT_TOKEN')
print(os.getenv('BOT_TOKEN'))

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

 ##   ##                    ###        ##                                                             ##
 ##   ##                     ##                                                                       ##
 ##   ##   ####    ######    ##  ##   ###     #####     ### ##           ######    ####    ######    #####
 ## # ##  ##  ##    ##  ##   ## ##     ##     ##  ##   ##  ##             ##  ##      ##    ##  ##    ##
 #######  ##  ##    ##       ####      ##     ##  ##   ##  ##             ##  ##   #####    ##        ##
 ### ###  ##  ##    ##       ## ##     ##     ##  ##    #####             #####   ##  ##    ##        ## ##
 ##   ##   ####    ####      ##  ##   ####    ##  ##       ##             ##       #####   ####        ###
                                                       #####             ####
alldata = {
    'uwtptg': None,
    'step': 0,
    'prevstep': 0
}
step = alldata['step']
prevstep = alldata['prevstep']
allbut = {
    'farmerstory': {
        'start': [KeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ —Ñ–µ—Ä–º–µ—Ä–∞')],
        'part1': [
                KeyboardButton(text='–•–æ–ª–æ–¥–Ω—ã–π'),
                KeyboardButton(text='–£–º–µ—Ä–Ω–µ–Ω–Ω—ã–π'),
                KeyboardButton(text='–ñ–∞—Ä–∫–∏–π')
        ]
    }
}
fs = allbut['farmerstory']
allkeybs = {
    'farmerstory': {
        'start': ReplyKeyboardMarkup(keyboard=[fs['start']], resize_keyboard=True, one_time_keyboard=True),
        'part1': {
            'kbs1': ReplyKeyboardMarkup(keyboard=[fs['part1']], resize_keyboard=True, one_time_keyboard=True),
        }
    }
}
fsk = allkeybs['farmerstory']

def addstep(step):
    step += 1
    return(step)

async def stepchcker():
    if not prevstep == step:
        async def mainneg(message: Message):
            await message.answer('–ù–µ–ª—å–∑—è –æ—Ç–æ–π—Ç–∏ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ ‚åõ')        
    
 ##   ##             ##                                                    ##
 ### ###                                                                   ##
 #######   ####     ###     #####             ######    ####    ######    #####
 #######      ##     ##     ##  ##             ##  ##      ##    ##  ##    ##
 ## # ##   #####     ##     ##  ##             ##  ##   #####    ##        ##
 ##   ##  ##  ##     ##     ##  ##             #####   ##  ##    ##        ## ##
 ##   ##   #####    ####    ##  ##             ##       #####   ####        ###
                                              ####



async def startbutton(message: Message):
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! üëã. –Ø —Å—É–ø–µ—Ä-–ø—É–ø–µ—Ä-–º–µ–≥–∞-—É–ª—å—Ç—Ä–∞-–≥–ª–æ–±–∞–ª—å–Ω–æ-–∞–±—Å–æ–ª—é—Ç–Ω–æ-–ª—É—á—à–∏–π-–ø—É—Ç–µ–≤–¥–æ–¥–∏—Ç–µ–ª—å-—Ä–∞—Å—Å–∫–∞–∑—á–∏–∫–∏—Å—Ç–æ—Ä–∏–π-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å, —Ü–≤–µ—Ç, –∑–∞–ø–∞—Ö –∏ –º–Ω–æ–≥–æ —á–µ–≥–æ –µ—â–µ. –ù–æ –µ—Å—Ç—å –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å. –•–æ—á–µ—à—å –ª–∏ —Ç—ã?')

async def playthegame(message: Message):
    if not alldata['uwtptg']:
        await message.answer('–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Ç–µ–±–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ –≤—ã–±–æ—Ä: üìñüñã (–ü–æ–∫–∞ —á—Ç–æ –≥–æ—Ç–æ–≤–∞ (–∏ —Ç–æ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é) —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞)',
                             reply_markup= fsk['start'])
        alldata['uwtptg'] = True
        reply_markup= fsk['start']
    else:
        await message.answer('–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–≤ —É–∂–µ –∏–¥—É—â—É—é ‚ùåüîö')
async def dontplay(message: Message):
    if not alldata['uwtptg']:
        await message.answer('–•–æ—Ä–æ—à–æ. –ù–æ –∫–∞–∫ –∑–∞—Ö–æ—á–µ—à—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–•–æ—á—É —Å—ã–≥—Ä–∞—Ç—å". –ü–æ–∫–∞! üëã')
        reply_markup=ReplyKeyboardRemove()
    else:
        await message.answer('–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–≤ —É–∂–µ –∏–¥—É—â—É—é ‚ùåüîö')

@dp.message(F.text == '–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ —Ñ–µ—Ä–º–µ—Ä–∞')
async def process_button(message: Message):
    await message.answer(
        text = '–û—Ç–ª–∏—á–Ω–æ!\n' \
        '----------\n' \
        '–ò—Ç–∞–∫, –≤—ã —Ñ–µ—Ä–º–µ—Ä. –ù—É –µ—â–µ –Ω–µ —Å–æ–≤—Å–µ–º, –Ω–æ –≤—Å–µ –∂–µ. üë®‚Äçüåæ\n' \
        '–ú–∞–ª–µ–Ω—å–∫–∞—è –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è: –°–æ–≤—Å–µ–º –Ω–µ–¥–∞–≤–Ω–æ, –æ–∫–æ–ª–æ 2-—Ö –Ω–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥, –≤—ã –±—ã–ª–∏ –∞—Ç–∞–∫–æ–≤–∞–Ω—ã —Å—É–¥—å–±–æ–π: —Å—Ç—Ä–∞—à–Ω—ã–π –ø–æ–∂–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–∑–≤–∞–Ω –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é, –ø–µ—Ä–µ–∫–∏–Ω—É–ª—Å—è –Ω–∞ –≤–∞—à –¥–æ–º. –û–¥–Ω–∞–∫–æ, –Ω–∏–∫—Ç–æ, –≤–æ–æ–±—â–µ –Ω–∏–∫—Ç–æ, –Ω–µ –ø–æ–º–æ–≥ –≤–∞–º. –í –∏—Ç–æ–≥–µ –≤—Å–µ —Å–≥–æ—Ä–µ–ª–æ –µ—â–µ –∑–∞–¥–æ–ª–≥–æ –¥–æ –ø—Ä–∏–µ–∑–¥–∞ –ø–æ–∂–∞—Ä–Ω—ã—Ö. –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–≤—à–∏—Å—å –≤ –ª—é–¥—è—Ö, –≤—ã —Ä–µ—à–∏–ª–∏ –∫—É–ø–∏—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–π —É—á–∞—Å—Ç–æ–∫, –≥–¥–µ-—Ç–æ –≤ –≥–ª—É—à–∏. –ì–ª–∞–≤–Ω–æ–µ –ø–æ–¥–∞–ª—å—à–µ –æ—Ç –æ–±—â–µ—Å—Ç–≤–∞. üò± –£ –≤–∞—Å –µ—Å—Ç—å —Ç—Ä–∏ —É—á–∞—Å—Ç–∫–∞ –Ω–∞ –≤—ã–±–æ—Ä:\n'
        '1-–π: –•–æ–ª–æ–¥–Ω—ã–π –∫–ª–∏–º–∞—Ç, –Ω–æ –Ω–∞–≤—Ä—è–¥ –ª–∏ –∫—Ç–æ-—Ç–æ –∏–∑ –ª—é–¥–µ–π –∑–∞—Ö–æ—á–µ—Ç —Å–æ–≤–∞—Ç—å—Å—è –≤ —Ç–∞–∫—É—é –≥–ª—É—à—å. –ñ–∏–≤–æ—Ç–Ω—ã–º –±—É–¥–µ—Ç –≤–æ–æ–±—â–µ –≤—Å–µ —Ä–∞–≤–Ω–æ, –Ω–æ –≤–æ—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è–º - —Ç—É–≥–æ ‚ùÑ\n' \
        '2-–π: –£–º–µ—Ä–µ–Ω–Ω—ã–π –∫–ª–∏–º–∞—Ç. –ò –∂–∏–≤–æ—Ç–Ω—ã–º, –∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º –±—É–¥–µ—Ç –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ, –Ω–æ –ª—é–¥–∏ –±—É–¥—É—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –∫ –≤–∞–º —á–∞—Å—Ç–æ. (–°–æ–≤–µ—Ç—É—é –±—Ä–∞—Ç—å —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç) üå≤\n' \
        '3-–π: –ñ–∞—Ä–∫–∏–π –∫–ª–∏–º–∞—Ç. –õ—é–¥–∏ –±—É–¥—É—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –∫ –≤–∞–º, –Ω–æ —Ä–µ–∂–µ, —á–µ–º –Ω–∞ —É–º–µ—Ä–µ–Ω–Ω–æ–º –∫–ª–∏–º–∞—Ç–µ, –æ–¥–Ω–∞–∫–æ –∂–∏–≤–æ—Ç–Ω—ã–º –±—É–¥–µ—Ç –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ, –≤ –æ—Ç–ª–∏—á–∏–∏ –æ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π ‚òÄ\n',
        reply_markup=fsk['part1']['kbs1'],
        prevstep = 1,
        step = addstep(step)
    )

 #####
  ## ##
  ##  ##  ######    ####     #####
  ##  ##   ##  ##  ##  ##   ##
  ##  ##   ##  ##  ######    #####
  ## ##    #####   ##            ##
 #####     ##       #####   ######
          ####

dp.message.register(dontplay, F.text.lower().in_(['–Ω–µ—Ç', '–Ω–µ', '–Ω–µ –Ω–∞–¥–æ', '–Ω–µ—Ç']))
dp.message.register(startbutton, Command(commands=['start']))
dp.message.register(playthegame, F.text.lower().in_(['–¥–∞', '–¥–∞–≤–∞–π', '–æ–∫', '—Ö–æ—Ä–æ—à–æ', '—Ö–æ—á—É —Å—ã–≥—Ä–∞—Ç—å']))

    ##       ##    ######                              ###         ##       ##
    ##       ##    # ## #                               ##         ##       ##
   ##       ##       ##     ######    ####     #####    ##        ##       ##
                     ##      ##  ##      ##   ##        #####
                     ##      ##       #####    #####    ##  ##
                     ##      ##      ##  ##        ##   ##  ##
                    ####    ####      #####   ######   ###  ##

async def main():
    print('–ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª')
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    run(main())